// Code generated by goctl. DO NOT EDIT.

package model

import (
	"context"
	"database/sql"
	"fmt"
	"strings"

	"github.com/zeromicro/go-zero/core/stores/builder"
	"github.com/zeromicro/go-zero/core/stores/sqlc"
	"github.com/zeromicro/go-zero/core/stores/sqlx"
	"github.com/zeromicro/go-zero/core/stringx"
)

var (
	tourFieldNames          = builder.RawFieldNames(&Tour{})
	tourRows                = strings.Join(tourFieldNames, ",")
	tourRowsExpectAutoSet   = strings.Join(stringx.Remove(tourFieldNames, "`create_at`", "`create_time`", "`created_at`", "`update_at`", "`update_time`", "`updated_at`"), ",")
	tourRowsWithPlaceHolder = strings.Join(stringx.Remove(tourFieldNames, "`tour_id`", "`create_at`", "`create_time`", "`created_at`", "`update_at`", "`update_time`", "`updated_at`"), "=?,") + "=?"
)

type (
	tourModel interface {
		Insert(ctx context.Context, data *Tour) (sql.Result, error)
		FindOne(ctx context.Context, tourId int64) (*Tour, error)
		Update(ctx context.Context, data *Tour) error
		Delete(ctx context.Context, tourId int64) error
	}

	defaultTourModel struct {
		conn  sqlx.SqlConn
		table string
	}

	Tour struct {
		TourId     int64          `db:"tour_id"`
		TourName   sql.NullString `db:"tour_name"`
		Desciption sql.NullString `db:"desciption"`
		Price      sql.NullInt64  `db:"price"`
		StartDate  sql.NullTime   `db:"start_date"`
		EndDate    sql.NullTime   `db:"end_date"`
		Location   sql.NullString `db:"location"`
	}
)

func newTourModel(conn sqlx.SqlConn) *defaultTourModel {
	return &defaultTourModel{
		conn:  conn,
		table: "`tour`",
	}
}

func (m *defaultTourModel) Delete(ctx context.Context, tourId int64) error {
	query := fmt.Sprintf("delete from %s where `tour_id` = ?", m.table)
	_, err := m.conn.ExecCtx(ctx, query, tourId)
	return err
}

func (m *defaultTourModel) FindOne(ctx context.Context, tourId int64) (*Tour, error) {
	query := fmt.Sprintf("select %s from %s where `tour_id` = ? limit 1", tourRows, m.table)
	var resp Tour
	err := m.conn.QueryRowCtx(ctx, &resp, query, tourId)
	switch err {
	case nil:
		return &resp, nil
	case sqlc.ErrNotFound:
		return nil, ErrNotFound
	default:
		return nil, err
	}
}

func (m *defaultTourModel) Insert(ctx context.Context, data *Tour) (sql.Result, error) {
	query := fmt.Sprintf("insert into %s (%s) values (?, ?, ?, ?, ?, ?, ?)", m.table, tourRowsExpectAutoSet)
	ret, err := m.conn.ExecCtx(ctx, query, data.TourId, data.TourName, data.Desciption, data.Price, data.StartDate, data.EndDate, data.Location)
	return ret, err
}

func (m *defaultTourModel) Update(ctx context.Context, data *Tour) error {
	query := fmt.Sprintf("update %s set %s where `tour_id` = ?", m.table, tourRowsWithPlaceHolder)
	_, err := m.conn.ExecCtx(ctx, query, data.TourName, data.Desciption, data.Price, data.StartDate, data.EndDate, data.Location, data.TourId)
	return err
}

func (m *defaultTourModel) tableName() string {
	return m.table
}
